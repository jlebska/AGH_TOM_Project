def evaluate_case(case_id, layer):
  case, gt_seg = load(case_id, layer)
  plt.imshow(case, cmap='gray', vmin=0, vmax=255)

  image = cv2.cvtColor(case, cv2.COLOR_GRAY2RGB)

  kmax=10;
  sse=elbow(image,kmax)
  x=np.linspace(3,10,8)
  plt.figure()
  plt.plot(x,sse)
  plt.plot([x[0],x[7]],[sse[0],sse[7]],'ro-')
  plt.xlabel('Number of clusters (k)')
  plt.ylabel('WSS')
  plt.title('Elbow method')


  a=sse[0]-sse[7]
  b=x[7]-x[0]
  c1=x[0]*sse[7]
  c2=x[7]*sse[0]
  c=c1-c2  
  distance=list()
  for i in range(8):
      distance.append(calc_distance(x[i],sse[i],a,b,c))

  fig=plt.figure()
  plt.plot(x,distance)
  plt.xlabel('Number of clusters (k)')
  plt.ylabel('Distance between points')
  plt.title('Determinig the optimal value of K')


  OptimalK=distance.index(max(distance))+4

  #plt.figure()

  [seg,masked]=segmentation(image,OptimalK,1)
  #plt.imshow(seg)
  #plt.show()
  #plt.figure()
  for i in range(1,OptimalK+1):
      [seg,masked]=segmentation(image,OptimalK,i)
      #plt.subplot(1,OptimalK,i)
      #plt.imshow(masked)
      #plt.axis('off')

  #plt.show()
  #plt.axis('off')

  masked_image = np.copy(image)
  masked_image = masked_image.reshape((-1, 3))
  [segmented_image,c,labels]=Kmeans(image,OptimalK)

  cluster = 0

  # for cluster in range(OptimalK):
  masked_image[labels == cluster] = [0, 255, 0]
  out_image = masked_image.reshape(image.shape)
  plt.imshow(out_image)
  plt.axis('off') 

  plt.show()
  return evaluate(gt_seg, labels.reshape(512,512))