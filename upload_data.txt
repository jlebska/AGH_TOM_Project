! git clone https://github.com/neheller/kits19
! pip install -r kits19/requirements.txt
cases_to_load = 5

from pathlib import Path
from shutil import move
import os
import sys
import time

from tqdm import tqdm
import requests
import numpy as np

imaging_url = "https://kits19.sfo2.digitaloceanspaces.com/"
imaging_name_tmplt = "master_{:05d}.nii.gz"
temp_f = Path("temp.tmp")


def get_destination(i):
    destination = Path("./kits19/data") / "case_{:05d}".format(i) / "imaging.nii.gz"
    if not destination.parent.exists():
        destination.parent.mkdir()
    return destination


def cleanup(bar, msg):
    bar.close()
    if temp_f.exists():
        temp_f.unlink()
    print(msg)
    sys.exit()


left_to_download = []
for i in range(cases_to_load):
    if not get_destination(i).exists():
        left_to_download = left_to_download + [i]


print("{} cases to download...".format(len(left_to_download)))
for i, cid in enumerate(left_to_download):
    print("Download {}/{}: ".format(
        i+1, len(left_to_download)
    ))
    destination = get_destination(cid)
    remote_name = imaging_name_tmplt.format(cid)
    uri = imaging_url + remote_name 

    chnksz = 1000
    tries = 0
    while True:
        try:
            tries = tries + 1
            response = requests.get(uri, stream=True)
            break
        except Exception as e:
            print("Failed to establish connection with server:\n")
            print(str(e) + "\n")
            if tries < 1000:
                print("Retrying in 30s")
                time.sleep(30)
            else:
                print("Max retries exceeded")
                sys.exit()

    try:
        with temp_f.open("wb") as f:
            bar = tqdm(
                unit="KB", 
                desc="case_{:05d}".format(cid), 
                total=int(
                    np.ceil(int(response.headers["content-length"])/chnksz)
                )
            )
            for pkg in response.iter_content(chunk_size=chnksz):
                f.write(pkg)
                bar.update(int(len(pkg)/chnksz))

            bar.close()
        move(str(temp_f), str(destination))
    except KeyboardInterrupt:
        cleanup(bar, "KeyboardInterrupt")
    except Exception as e:
        cleanup(bar, str(e))
#loading images

from pathlib import Path

import nibabel as nib


def get_full_case_id(cid):
    try:
        cid = int(cid)
        case_id = "case_{:05d}".format(cid)
    except ValueError:
        case_id = cid

    return case_id


def get_case_path(cid):
    # Resolve location where data should be living
    data_path = Path("./kits19/") / "data"
    if not data_path.exists():
        raise IOError(
            "Data path, {}, could not be resolved".format(str(data_path))
        )

    # Get case_id from provided cid
    case_id = get_full_case_id(cid)

    # Make sure that case_id exists under the data_path
    case_path = data_path / case_id
    if not case_path.exists():
        raise ValueError(
            "Case could not be found \"{}\"".format(case_path.name)
        )

    return case_path


def load_volume(cid):
    case_path = get_case_path(cid)
    vol = nib.load(str(case_path / "imaging.nii.gz"))
    return vol


def load_segmentation(cid):
    case_path = get_case_path(cid)
    seg = nib.load(str(case_path / "segmentation.nii.gz"))
    return seg


def load_case(cid):
    vol = load_volume(cid)
    seg = load_segmentation(cid)
    return vol, seg



